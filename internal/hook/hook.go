package hook

import (
	_ "embed"
	"errors"
	"io"
	"os"

	"github.com/mikelorant/committed/internal/shell"
)

type Hook struct {
	Action  Action
	Creator Creator
	Locater Locater
	Opener  Opener
	Runner  Runner
	Stater  Stater

	Location  string
	Directory string

	file *os.File
}

type Options struct {
	Install   bool
	Uninstall bool
	Commit    bool
}

type (
	Creator func(name string, flag int, perm os.FileMode) (*os.File, error)
	Opener  func(string) (*os.File, error)
	Locater func(run Runner) (string, error)
	Runner  func(io.Writer, string, []string) error
	Stater  func(string) (os.FileInfo, error)
)

type (
	Action int
)

//go:embed prepare-commit-msg.sh
var PrepareGitMessage string

var GitHook = "hooks/prepare-commit-msg"

var (
	ErrAction    = errors.New("invalid hook action")
	ErrUnmanaged = errors.New("hook file unmanaged")
)

const (
	ActionUnset Action = iota
	ActionInstall
	ActionUninstall
	ActionCommit
)

const (
	Marker = "Code generated by Committed. DO NOT EDIT."
)

func New(opts Options) Hook {
	return Hook{
		Action:  action(opts),
		Creator: os.OpenFile,
		Opener:  os.Open,
		Locater: Locate,
		Runner:  shell.Run,
		Stater:  os.Stat,
	}
}

func (h *Hook) Do() error {
	switch h.Action {
	case ActionInstall:
		return nil
	case ActionUninstall:
		return nil
	}

	return ErrAction
}

func action(opts Options) Action {
	switch {
	case opts.Install:
		return ActionInstall
	case opts.Uninstall:
		return ActionUninstall
	case opts.Commit:
		return ActionCommit
	}

	return ActionUnset
}
