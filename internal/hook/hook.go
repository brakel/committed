package hook

import (
	_ "embed"
	"errors"
	"io"
	"os"

	"github.com/mikelorant/committed/internal/shell"
)

type Hook struct {
	Creator Creator
	Locater Locater
	Deleter Deleter
	Opener  Opener
	Runner  Runner
	Stater  Stater

	Location  string
	Directory string

	file *os.File
}

type Options struct {
	Install   bool
	Uninstall bool
	Commit    bool
}

type (
	Creator func(name string, flag int, perm os.FileMode) (*os.File, error)
	Deleter func(string) error
	Opener  func(string) (*os.File, error)
	Locater func(run Runner) (string, error)
	Runner  func(io.Writer, string, []string) error
	Stater  func(string) (os.FileInfo, error)
)

type (
	Action int
)

//go:embed prepare-commit-msg.sh
var PrepareGitMessage string

var GitHook = "hooks/prepare-commit-msg"

var (
	ErrAction    = errors.New("invalid hook action")
	ErrUnmanaged = errors.New("hook file unmanaged")
)

const (
	ActionUnset Action = iota
	ActionInstall
	ActionUninstall
	ActionCommit
)

const (
	Marker = "Code generated by Committed. DO NOT EDIT."
)

func New() Hook {
	return Hook{
		Creator: os.OpenFile,
		Deleter: os.Remove,
		Opener:  os.Open,
		Locater: Locate,
		Runner:  shell.Run,
		Stater:  os.Stat,
	}
}

func (h *Hook) Do(opts Options) error {
	switch {
	case opts.Install:
		return h.Install()
	case opts.Uninstall:
		return h.Uninstall()
	}

	return ErrAction
}
